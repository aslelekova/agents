import asyncio
import os

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from services.role_service import get_user_role
from handlers.agent_handler import questions_data, current_question_by_support_id, schedule_reminder
from keyboards.support_keyboards import get_support_dialog_keyboard, get_new_question_keyboard
from services.csv_logger import log_answer, log_resolution
from config import SUPPORT_CHAT_ID, CSV_FILE_PATH

router = Router()

@router.message(F.text == "/export", F.chat.type == "private", F.from_user.id.func(lambda uid: get_user_role(uid) == "support"))
async def export_log(message: Message):
    if os.path.exists(CSV_FILE_PATH):
        await message.answer_document(FSInputFile(CSV_FILE_PATH))
    else:
        await message.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(F.text == "/end", F.chat.type == "private", F.from_user.id.func(lambda uid: get_user_role(uid) == "support"))
async def end_dialog_command(message: Message):
    user_id = message.from_user.id
    question_id = current_question_by_support_id.get(user_id)

    if not question_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        return

    question_info = questions_data.get(question_id)
    if not question_info:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º
    question_info["status"] = "done"
    question_info["assigned_to"] = None
    question_info["is_followup_active"] = False
    current_question_by_support_id.pop(user_id, None)

    agent_id = question_info["agent_id"]

    await message.answer(f"–î–∏–∞–ª–æ–≥ –ø–æ –≤–æ–ø—Ä–æ—Å—É #{question_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")
    for q in questions_data.values():
        if q["agent_id"] == agent_id:
            q["is_followup_active"] = False
    await message.bot.send_message(
        chat_id=agent_id,
        text="–ú—ã —Ä–∞–¥—ã –±—ã–ª–∏ –ø–æ–º–æ—á—å! –£–¥–∞–ª–æ—Å—å –ª–∏ –Ω–∞–º —Ä–µ—à–∏—Ç—å –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data="resolved"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="not_resolved")
            ]
        ])
    )


@router.callback_query(F.data.startswith("accept_question"))
async def accept_question_callback(call: CallbackQuery):
    user_id = call.from_user.id
    role = get_user_role(user_id)

    if role != "support":
        await call.answer("–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    _, question_id_str = call.data.split(":")
    question_id = int(question_id_str)

    question_info = questions_data.get(question_id)
    if not question_info:
        await call.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if question_info["assigned_to"] is not None and question_info["assigned_to"] != user_id:
        await call.answer("–í–æ–ø—Ä–æ—Å —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!", show_alert=True)
        return

    question_info["assigned_to"] = user_id
    question_info["status"] = "in_progress"
    question_info["is_followup_active"] = True
    current_question_by_support_id[user_id] = question_id  # üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
    agent_name = question_info.get("agent_name")
    await call.message.edit_text(
        text=f"–í–æ–ø—Ä–æ—Å #{question_id} –æ—Ç {agent_name} –ø—Ä–∏–Ω—è—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {call.from_user.first_name}.",
    )
    await call.answer("–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")

    await call.bot.send_message(
        chat_id=user_id,
        text=(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç {agent_name}.\n"
              f"–í–æ–ø—Ä–æ—Å: {question_info['question_text']}\n\n"
              f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç—É."),
        reply_markup=get_support_dialog_keyboard(question_id)
    )


@router.callback_query(F.data.startswith("reassign_question"))
async def reassign_question_callback(call: CallbackQuery):
    user_id = call.from_user.id
    role = get_user_role(user_id)
    if role != "support":
        await call.answer("–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    _, question_id_str = call.data.split(":")
    question_id = int(question_id_str)

    question_info = questions_data.get(question_id)
    if not question_info:
        await call.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if question_info.get("answered"):
        await call.answer("‚ùå –ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç. –ï–≥–æ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.", show_alert=True)
        return

    question_info["assigned_to"] = None
    question_info["status"] = "new"
    current_question_by_support_id.pop(user_id, None)

    try:
        await call.message.delete()
    except Exception as e:
        print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}")
    agent_name = question_info.get("agent_name")
    if SUPPORT_CHAT_ID:
        sent = await call.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=(
                f"–í–æ–ø—Ä–æ—Å #{question_id} –æ—Ç {agent_name} \"{question_info['question_text']}\" —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω. –ö—Ç–æ –ø—Ä–∏–º–µ—Ç?"),
            reply_markup=get_new_question_keyboard(question_id)
        )

        question_info["support_message_id"] = sent.message_id

        asyncio.create_task(schedule_reminder(question_id, call.bot))

    await call.answer("–í–æ–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ–±—â–∏–π –ø—É–ª.")


@router.callback_query(F.data.startswith("done_question"))
async def done_question_callback(call: CallbackQuery):
    user_id = call.from_user.id
    role = get_user_role(user_id)
    if role != "support":
        await call.answer("–¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    _, question_id_str = call.data.split(":")
    question_id = int(question_id_str)
    question_info = questions_data.get(question_id)
    if not question_info:
        await call.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    question_info["status"] = "done"
    question_info["assigned_to"] = None
    current_question_by_support_id.pop(user_id, None)

    await call.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await call.message.edit_text(f"–í–æ–ø—Ä–æ—Å #{question_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")


@router.message(F.chat.type == "private", F.text, F.from_user.id.func(lambda uid: get_user_role(uid) == "support"))
async def support_answer_message(message: Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)

    print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, —Ä–æ–ª—å: {role}, —Ç–µ–∫—Å—Ç: {message.text}, —á–∞—Ç: {message.chat.type}")

    if role != "support":
        return

    text = message.text.strip()
    if not text:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    question_id = current_question_by_support_id.get(user_id)
    if not question_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    question_info = questions_data.get(question_id)
    if not question_info:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    agent_id = question_info.get("agent_id")
    agent_name = question_info.get("agent_name")

    if not agent_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≥–µ–Ω—Ç—É, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç—É –æ—Ç–≤–µ—Ç
        await message.bot.send_message(
            chat_id=agent_id,
            text=f"{text}"
        )

        question_info["answered"] = True
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≥–µ–Ω—Ç—É: {e}")
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç—É {agent_id}: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    log_answer(question_id, message.from_user.first_name, text)

    await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç—É ({agent_name}) –ø–æ –≤–æ–ø—Ä–æ—Å—É #{question_id}")


@router.callback_query(F.data.in_({"resolved", "not_resolved"}))
async def resolution_feedback(call: CallbackQuery):
    user_id = call.from_user.id

    # –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    latest_qid = None
    for qid in sorted(questions_data.keys(), reverse=True):
        q = questions_data[qid]
        if q["agent_id"] == user_id:
            latest_qid = qid
            break

    if not latest_qid:
        await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.")
        return

    if call.data == "resolved":
        log_resolution(latest_qid, "yes")
        await call.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å")
    else:
        log_resolution(latest_qid, "no")
        await call.message.edit_text("–°–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–æ—á—å. –ú—ã –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ª—É—á—à–µ!")

    await call.answer()
